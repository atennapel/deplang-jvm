(::) : {A : U0 Val} -> A -> List A -> List A = \hd tl. Cons hd tl;

foldr : {A : U0 Val} {vf : VF} {B : U0 vf} -> (A -> B -> B) -> B -> List A -> B = \cons nil l.
  `(fix (go l. case l nil (hd tl. cons hd (go tl))) l);

Push : U0 Val -> U1 = \A. (vf: VF) (B : U0 vf) -> (A -> B -> B) -> B -> B;

up : {A : U0 Val} -> List A -> Push A =
  \{A} as vf B f b. foldr {A} {vf} {B} f b as;

down : {A : U0 Val} -> Push A -> List A = \{A} as. as Val (List A) (::) Nil;

map : {A B : U0 Val} -> (A -> B) -> Push A -> Push B =
  \f as vf R c n. as vf R (\a bs. c (f a) bs) n;

foldl : {A B : U0 Val} -> (B -> A -> B) -> B -> Push A -> B =
  \{A} {B} f b as. $(as Fun (B -> B) (\a rec acc. $rec (f acc a)) (\acc. acc)) b;

sum : Push Int -> Int = foldl (\x y. x + y) 0;

list : List Int ::= 1 :: 2 :: 3 :: Nil;

(|>) : {A B : U1} -> A -> (A -> B) -> B = \x f. f x;

main : Int -> Int := \_.
  up list
  |> map (\x. x + 1)
  |> map (\x. let y ::= x in y * y)
  |> map (\x. x - 1)
  |> sum;
